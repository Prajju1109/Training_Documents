
######################
Day 2 : 4th July 2025
######################

	Build Orchestration Tool - Jenkins 
	
	DevOps :
	
	- Automate Application Builds and Deployments:
	
	Jenkins :
	
	Jenkins Architecture :
	
	- Master & Slave Architecture :
	
	DevOps Process/Stages :

		- Continuous Development 
		- Continuous Integration
		- Continuous Delivery/Deployment
		
		
	Jenkins:
	
	Jenkins -> Build Orchestration Tool :
	
	What is Jenkins?
	
	
	Continuous Development & Continuous Integration ::::
	
		Using DevOps Approach ::
			Developers :
			-- Create Application Source Code 
			-- Commit the Source Code to Source Code Repository like github
			
			Using DevOps Process :
			Automate ::

			- Build the code - Compile and create artifacts 					
			- Unit Testing 					
			- Promote the Application to higher testing Environment					
			- Notify the Testing/Development Team 	

		Tools :::
		
			- Eclipse based IDEs - like Eclipse for Java,Pycharm,Intellij, Visual Studio, Visual Studio Code
			- Source Code Management Tool - like github/AWS Code Commit/Azure Repos 
			
			- Jenkins/AzurePipeline/AWS CodeBuild/gitlab-ci/bamboo/github-actions
			
			

	Environment:
	
		Dev 
			Create Source Code!							--> Eclipse/GIT/GITHUB
			
		Build 
			use the code in build enviroment			--> Git 
			build - compile								--> maven
			create artitfacts							--> maven
			unit test 									--> maven,junit
			
			promote the artifacts to Test environment   --> Ansible/Deployment plugins/SSH
		
		Test 
			Automated QA Testing 						--> TestNG,Selenium
			Generate Test Reports 						--> TestNG,Selenium	
			Validated Test Results 						--> TestNG,Selenium
			promote the artifacts to Prod environment	--> Ansible/Deployment plugins/SSH 	
	
	What is Jenkins :::
	
		Jenkins is Open-Source Build Orchestration Tool.
		Used to Automate the End-to-End Application Build and Deployments
		Using Jenkins we can create CI/CD Pipelines 
				
		Alternative to Jenkins:
		
		- Azure Pipelines/AWS CodeBuild/gitlab-ci/bamboo/github-actions
	
	Jenkins Architecture ::
	
		Jenkins is based on Master-Slave Architecture :::
		

			Jenkins_Master (VM)				==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts
			
			
		Scenario 1: 
		
			Client Application : Java Applications 
			
				- Wants to build and deploy the Java Applications using Jenkins 
				
				- Less Build and Release frequencies - monthly once
				
				
				Recommend to used Just Jenkins Master :

				Jenkins_Master (VM)			==> To Create Jenkins CI/CD Pipeline Jobs/Projects and execute 
											==> Install jdk, Jenkins, git, maven 
				
				
				
		Scenario 1.1: 
		
			Client Application : Java Applications 
			
				- Wants to build and deploy the Java Applications using Jenkins 
				
				- High Build and Release frequencies
				
				
			Recommended to use Jenkins Master & Slave :

			Jenkins_Master (VM)				
						==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins_SlaveNodes.			
				
				Jenkins_SlaveNode1 (VM)		==> Java 
				Jenkins_SlaveNode2 (VM)		==> Java 				
				
				
		Scenario 2:
			
			Client :	Java/Python/.Net/Ruby/Cobol/Node-JS/Angular
			
				- Very High Build and Release frequencies
				
				
				- Wants to build and deploy using Jenkins


			Not Recommend to use Just Jenkins Master :

			Jenkins_Master (VM)			==> To Create Jenkins CI/CD Pipeline Jobs/Projects and execute 
										==> Install jdk, Jenkins, git, maven, Python, .Net,Ruby,Cobol,Node,....				



			Recommended to use Jenkins Master & Slave :
			
			Jenkins_Master (VM)				
						==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins_SlaveNodes.			
				
				Jenkins_SlaveNode1 (VM)		==> Java 
				Jenkins_SlaveNode1.1 (VM)	==> Java 
				Jenkins_SlaveNode2 (VM)		==> .Net 
				Jenkins_SlaveNode3 (VM)		==> Python 
				Jenkins_SlaveNode4 (VM)		==> Angular/NodeJS
				Jenkins_SlaveNode5 (VM)		==> Ruby 				
				

	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments
		Notify 
		Deploy to Prod 	
		
	
	
	Working with Jenkins :
	
	
		Developers' Perspective :
		- Developers are just the consumers of Jenkins using Jenkins Tools and Services.
		- Developers use Jenkins to execute/cancel/view the output - workspace of the Jenkins projects/Pipelines/Jobs.
	
	
		DevOps Team Perspective :
		
		- DevOps Team is the owner of Jenkins.	
		
		- Roles & Responsibilities of DevOps Team/Resources :
		
			Jenkins Administration :
			
			- Installation of Jenkins 
			- Global System Configuration
			- Jenkins Plugins Management
			- Tools Management 
			- User Management 
			- Security Management 
			- Credential Management
			- Create Jenkins Project in Jenkins Master Node 
			- Configure the Jenkins Master & Slave Architecture
			- Create CICD Pipeline Projects to Automate Application Builds & Deployments 
			- Onboard the Applications to DevOps Process 
			- Periodic Upgrade of Jenkins Services and Plugins 
			- Periodic Back-up of Jenkins Server and Jenkins Projects
			- Trouble-Shoot the Jenkins related Issues
			
			
	- Installation of Jenkins :::	
				https://www.jenkins.io/doc/book/installing/
	
		Package Management :
		
			- Jenkins is a package runs as a service in default port 8080.
			
				- Install Pre-Requisites 
				
				- Install Jenkins 
				
				- Post Installation Activities
			
			
######################
Day 3 : 4th July 2025
######################

	- Jenkins Global System Configuration :::
	
		- Set the default properties of Jenkins.
		- Used to Configure the remote servers to Jenkins 
	
	- Jenkins Plugins Management :::
	
		- Install/Uninstall/Enable/Disable Jenkins Plugins
		
	
	- Tools Management :::
	
		- Used to Add the Home Directories of the Tools 
	
	
	- User Management :::
	
		- Enable User Authentication
		- Used to Create/Delete/Update Users
	
	
	- Security Management :::
	
		- Enable User Authorization using Matrix Based Security Option
		
		
	- Credential Management :::
	
		- Used maintain the Credentials of remote servers in Jenkins Credential Manager
	
	
	- Create Jenkins Project in Jenkins Master Node :::
	
		- Create Jenkins Projects/Jobs :
		
			- Free-Style Projects		# Is completely Manual Configurations
			
			
		Working with Variables :
		
			- Environment Variables :: pre-defined Jenkins Keywords
			
			
				Handling Jenkins Variables :::
				
					- "${var_name}"
					
					- Eg.: 
					
						"${JOB_NAME}"
			
			
			
			- User Defined Variables :::
			
				- x = 5 
			
Next :::		
			
	- Pipeline Projects 		# Is completely Automated Project created using Groovy Scripts
			
			
			
######################
Day 4 : 9th July 2025
######################

	- Pipeline Projects 		# Is completely Automated Project created using Groovy Scripts
			
		Jenkins CI/CD Pipeline :
		
			- It is collection Stages to execute the desired tasks.
			
			Types of Pipelines :
			
				- Scripted Pipelines :::
				
					- Based the typical groovy scripts 
				
				- Declarative Pipelines :::
				
					- User friendly 
					
					- Scripts can be autogenerated using Snippet Generators
			
			
			
			
	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments(VM)
		Notify 
		Deploy to Prod



pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/SA-DevOps-0207/java-webapp-project.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application_Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Server') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}

	- Configure the Jenkins Master & Slave Architecture :::

		Jenkins_Master (VM)				
					==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins_SlaveNodes.			
			
			Jenkins_SlaveNode1 (VM)		==> Java 
			
			
		Linux Module : Remote Server Access using SSH

			Host Name :
			
			User Name : 
			
			Credentials : SSH Keys 


	
	- Setup Tomcat Web Application Server to Deploy Application
	
	
		Jenkins_Master (VM)					# git,jdk,jenkins		
					==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins_SlaveNodes.			
			
			Jenkins_SlaveNode1 (VM)		==> # git,jdk,maven 	
			
		
		Tomcat_Server (VM)					# Install jdk, Tomcat.(Web Application Server - used to execute the Java based web application artifacts)
		
		
		What is Deployment ?
		
			- Process of Copying the Artifacts to the Target Server!
			
			
			Source Server 																		Target Server

				- Slave_Node 																		- Tomcat_Server
				
					- Source file 																		- Target path 
					
						target/*.war																		/opt/tomcat/webapps	
						
																											/opt/tomcat/webapps/*.war  # Upon Deployment 
		
		
		Publish Over SSH Plugin to Copy the Artifacts from Jenkins Slave Node to Tomcat Server
	
Next ::: 

	- Enable Deployment to Tomcat Server using Jenkins 
	
	- Email Notifications 
	
	- Build Triggers 	


######################
Day 5 : 10th July 2025
######################	
	

	- Enable Deployment to Tomcat Server using Jenkins :::
	
		What is Deployment ?
		
			- Process of Copying the Artifacts to the Target Server!
			
			
			Source Server 																		Target Server

				- Slave_Node 																		- Tomcat_Server
				
					- Source file 																		- Target path 
					
						target/*.war																		/opt/tomcat/webapps	
						
	
	
	- Publish Over SSH Plugin to Copy the Artifacts from Jenkins Slave Node to Tomcat Server	
	
		- Login to Jenkins Master --> Manage Jenkins --> Plugins --> Available Plugins tab - search for Publish Over SSH Plugin & Install with restart option.
		
		
	- Goto Manage Jenkins --> System Configuration --> Configuration Tomcat Server using Publish Over SSH Plugin Configuration
	



pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/SA-DevOps-0207/java-webapp-project.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application_Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Server') {
            steps {
                script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])				
				}
            }
        }
    }
}
	
	
	- Email Notifications :::
	
		In Jenkins Pipeline Jobs, Email Notifications can be done as a post build action.
		
		
		Stage{}
		post{
			success 
			failure 
			abort
		}
		
To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :

		gmail Server ==> 

To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :




Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA/Two-Way Authentication --> mobile#

Search for App password in the same page

Name:
Mail

What ? window
Which Appln - email	

App Password = 16 bytes of App Password. vaufxwhdbtnlltzr vauf xwhd btnl ltzr



How to setup the Email Server in the Jenkins Config:

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com	

SMTP Authentication
	User Name: Enter Email ID 
	Password : 16 bytes of App Token (Created in Gmail)
	
Choose SSL :

SMTP Port :: 465		
				
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/SA-DevOps-0207/java-webapp-project.git'
            }
            post {
                failure {
                  sh "echo 'Send mail on failure'"					  
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'			
                }
              }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application_Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Server') {
            steps {
                script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])				
				}
				}
            post {
                Success {
                  sh "echo 'Send mail on Success-deployment'"
				  	
					mail bcc: 's1.gmail.com', body: '"Jenkins Jobs Status ${BUILD_URL}"', cc: 's1.gmail.com', from: '', replyTo: '', subject: 'Deployment Successful', to: 's1.gmail.com'
                }
                Failure {
                  sh "echo 'Send mail on deployment Failure'"
				  
					mail bcc: 's1.gmail.com', body: '"Jenkins Jobs Status ${BUILD_URL}"', cc: 's1.gmail.com', from: '', replyTo: '', subject: 'Deployment Failed', to: 's1.gmail.com'
                }
                abort {
                  sh "echo 'Send mail on deployment Aborted'"
					mail bcc: 's1.gmail.com', body: '"Jenkins Jobs Status ${BUILD_URL}"', cc: 's1.gmail.com', from: '', replyTo: '', subject: 'Deployment Aborted', to: 's1.gmail.com'
                }		
              }
            }
        }
    }
	


	
	- Build Triggers 		::::


		Is used to Automate the Job Scheduling!
		
		
		
			- Build Periodic 
			
			- GitHub Webhook 
			
			- PollSCM 
		
		
	
	
		- Build Periodic :			# https://crontab.guru/
			
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- To perform any process automation
			- The build is sheduled based on the crontab 
			
			
			Eg.: 
			
				Environments :
				
					Non-Prod Environments												=====>		Prod Environments
					
						Should be available only during the business Hours 								Should be available 24/7
						
							9AM - 10PM 
							
						Jenkins Project1 		Scheduled to run at 7:45AM
						
							- Task - Start all the Non-Prod Servers 

						Jenkins Project2 		Scheduled to run at 10:15PM
						
							- Task - Stop all the Non-Prod Servers 							
							
		- GitHub Webhook :::
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL			

		
				Payload Url: 
				http://43.204.107.80:8080/github-webhook/
		
		- PollSCM :::
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			
			Test Cycles :
			
				==>  8AM - 12PM - 3PM
				
				QA/UAT Testing  
			
			
